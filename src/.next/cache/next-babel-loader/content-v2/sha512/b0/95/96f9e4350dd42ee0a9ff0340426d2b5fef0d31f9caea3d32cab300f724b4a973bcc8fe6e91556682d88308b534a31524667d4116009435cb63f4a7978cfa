{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\projeto-react\\\\moveit-next\\\\src\\\\pages\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { ChallengesContext } from './ChallengesContext';\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(25 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHarFinished = _useState3[1]; // Math.floor arredonda pra baixo\n\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(25 * 60);\n    setHarFinished(false);\n  } // sempre receberá primeiro uma função que, que será execultada caso o segundo parâmetro seja mudado\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHarFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"zvkqetRamd6sbAs/ijMd4OHfVU0=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/projeto-react/moveit-next/src/pages/contexts/CountdownContext.tsx"],"names":["createContext","useState","useContext","useEffect","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHarFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA4CC,UAA5C,EAAwDC,SAAxD,QAAyE,OAAzE;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAgBA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAE,EAAF,CAAtC;AAEP,IAAIM,gBAAJ;AAGA,OAAO,SAASC,iBAAT,OAA+D;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;;AAAA,oBAEpCN,UAAU,CAACE,iBAAD,CAF0B;AAAA,MAE1DK,iBAF0D,eAE1DA,iBAF0D;;AAAA,kBAI1CR,QAAQ,CAAC,KAAK,EAAN,CAJkC;AAAA,MAI3DS,IAJ2D;AAAA,MAIrDC,OAJqD;;AAAA,mBAKlCV,QAAQ,CAAC,KAAD,CAL0B;AAAA,MAK3DW,QAL2D;AAAA,MAKjDC,WALiD;;AAAA,mBAM5BZ,QAAQ,CAAE,KAAF,CANoB;AAAA,MAM3Da,WAN2D;AAAA,MAM9CC,cAN8C,kBAQlE;;;AACA,MAAMC,OAAO,GAAIC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAjB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAAyB;AACrBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,KAAG,EAAJ,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GArBiE,CAuBlE;;;AACAZ,EAAAA,SAAS,CAAE,YAAM;AACb,QAAGS,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAwB;AACpBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAKK,IAAGE,QAAQ,IAAIF,IAAI,IAAI,CAAvB,EAAyB;AAC1BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT;AAcA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC/BM,MAAAA,OAAO,EAAPA,OAD+B;AAE/BG,MAAAA,OAAO,EAAPA,OAF+B;AAG/BL,MAAAA,WAAW,EAAXA,WAH+B;AAI/BF,MAAAA,QAAQ,EAARA,QAJ+B;AAK/BQ,MAAAA,cAAc,EAAdA,cAL+B;AAM/BC,MAAAA,cAAc,EAAdA;AAN+B,KAAlC;AAAA,cAQCb;AARD;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAlDeD,iB;;KAAAA,iB","sourcesContent":["import {createContext, useState, ReactNode, useContext, useEffect } from 'react';\r\nimport { ChallengesContext } from './ChallengesContext';\r\n\r\n\r\ninterface CountdownContextData{\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext ({ } as CountdownContextData);\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\n\r\nexport function CountdownProvider({children}: CountdownProviderProps ){\r\n\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n    const [time, setTime] = useState(25 * 60);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHarFinished] = useState (false);\r\n\r\n    // Math.floor arredonda pra baixo\r\n    const minutes =  Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    function startCountdown(){\r\n        setIsActive(true);\r\n    }\r\n\r\n    function resetCountdown(){\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setTime(25*60);\r\n        setHarFinished(false);\r\n    }\r\n\r\n    // sempre receberá primeiro uma função que, que será execultada caso o segundo parâmetro seja mudado\r\n    useEffect( () => {\r\n        if(isActive && time > 0){\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        }\r\n        else if(isActive && time == 0){\r\n            setHarFinished(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n        }\r\n    }, [isActive, time])\r\n\r\n\r\n    return (\r\n        <CountdownContext.Provider value={{ \r\n           minutes, \r\n           seconds,\r\n           hasFinished,\r\n           isActive,\r\n           startCountdown,\r\n           resetCountdown,\r\n        }}>\r\n        {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}