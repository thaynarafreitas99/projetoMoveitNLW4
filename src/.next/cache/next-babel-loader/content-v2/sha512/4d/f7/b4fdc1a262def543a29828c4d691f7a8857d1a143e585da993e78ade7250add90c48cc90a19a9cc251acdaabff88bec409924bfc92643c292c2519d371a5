{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\projeto-react\\\\moveit-next\\\\src\\\\pages\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currenteExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallgenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount; // let it change quer dizer => deixa isso mudar, pode receber um novo valor no futuro.\n\n    var finalExperience = currenteExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currenteExperience: currenteExperience,\n      challengesCompleted: challengesCompleted,\n      experienceToNextLevel: experienceToNextLevel,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallgenge: resetChallgenge,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"dKy0hlzDqazkQw2SJw2sLe9mm00=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/projeto-react/moveit-next/src/pages/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currenteExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallgenge","completeChallenge","amount","finalExperience"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAkD,OAAlD;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AA0BA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAE,EAAF,CAAvC;AAGP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAE5CJ,QAAQ,CAAC,CAAD,CAFoC;AAAA,MAE/DK,KAF+D;AAAA,MAExDC,QAFwD;;AAAA,mBAGnBN,QAAQ,CAAC,CAAD,CAHW;AAAA,MAG/DO,kBAH+D;AAAA,MAG3CC,oBAH2C;;AAAA,mBAIhBR,QAAQ,CAAC,CAAD,CAJQ;AAAA,MAI/DS,mBAJ+D;AAAA,MAI1CC,sBAJ0C;;AAAA,mBAKxBV,QAAQ,CAAC,IAAD,CALgB;AAAA,MAK/DW,eAL+D;AAAA,MAK9CC,kBAL8C;;AAOtE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AAChBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAiBnB,UAAU,CAACoB,MAAvC,CAA7B;AACA,QAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,eAAT,GAA0B;AACtBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAI,CAACb,eAAL,EAAqB;AACjB;AACH;;AAHuB,QAIhBc,MAJgB,GAILd,eAJK,CAIhBc,MAJgB,EAKxB;;AACA,QAAIC,eAAe,GAAGnB,kBAAkB,GAAGkB,MAA3C;;AAEA,QAAGC,eAAe,IAAIb,qBAAtB,EAA4C;AACxCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACkB,eAAD,CAApB;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAEH;;AAGD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAC/BJ,MAAAA,KAAK,EAALA,KAD+B;AAE/BE,MAAAA,kBAAkB,EAAlBA,kBAF+B;AAG/BE,MAAAA,mBAAmB,EAAnBA,mBAH+B;AAI/BI,MAAAA,qBAAqB,EAArBA,qBAJ+B;AAK/BG,MAAAA,OAAO,EAAPA,OAL+B;AAM/BC,MAAAA,iBAAiB,EAAjBA,iBAN+B;AAO/BN,MAAAA,eAAe,EAAfA,eAP+B;AAQ/BY,MAAAA,eAAe,EAAfA,eAR+B;AAS/BC,MAAAA,iBAAiB,EAAjBA;AAT+B,KAAnC;AAAA,cAWCpB;AAXD;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA3DeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, useState, ReactNode } from 'react';\r\n\r\nimport challenges from '../../../challenges.json'\r\n\r\ninterface Challenge{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\n// ReactNode aceita qualquer modo;\r\n\r\ninterface ChallengesContextData{\r\n    level: number;\r\n    currenteExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel:number;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallgenge: () => void;\r\n    completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext ({ } as ChallengesContextData);\r\n\r\n\r\nexport function ChallengesProvider({ children } : ChallengesProviderProps){\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [currenteExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n    function levelUp(){\r\n      setLevel(level + 1);\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        const randomChallengeIndex = Math.floor(Math.random () * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n    }\r\n\r\n    function resetChallgenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallenge(){\r\n        if (!activeChallenge){\r\n            return;\r\n        }\r\n        const { amount } = activeChallenge;\r\n        // let it change quer dizer => deixa isso mudar, pode receber um novo valor no futuro.\r\n        let finalExperience = currenteExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(challengesCompleted + 1);\r\n\r\n    }\r\n\r\n    \r\n    return (\r\n        <ChallengesContext.Provider value={{ \r\n            level, \r\n            currenteExperience, \r\n            challengesCompleted, \r\n            experienceToNextLevel,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallgenge,\r\n            completeChallenge\r\n        }}>\r\n        {children}\r\n        </ChallengesContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}