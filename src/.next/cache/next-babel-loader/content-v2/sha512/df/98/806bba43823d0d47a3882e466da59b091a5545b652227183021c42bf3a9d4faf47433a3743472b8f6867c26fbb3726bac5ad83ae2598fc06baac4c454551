{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projeto-react\\\\moveit-next\\\\src\\\\pages\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useState, useContext, useEffect } from 'react';\nimport { ChallengesContext } from './ChallengesContext';\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHarFinished\n  } = useState(false); // Math.floor arredonda pra baixo\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(25 * 60);\n  } // sempre receberá primeiro uma função que, que será execultada caso o segundo parâmetro seja mudado\n\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHarFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/projeto-react/moveit-next/src/pages/contexts/CountdownContext.tsx"],"names":["createContext","useState","useContext","useEffect","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHarFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA4CC,UAA5C,EAAwDC,SAAxD,QAAyE,OAAzE;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAgBA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAE,EAAF,CAAtC;AAEP,IAAIM,gBAAJ;AAGA,OAAO,SAASC,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAA+D;AAElE,QAAM;AAAEC,IAAAA;AAAF,MAAwBP,UAAU,CAACE,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,KAAK,EAAN,CAAhC;AACA,QAAM;AAAA,OAACW,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACa,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAAE,KAAF,CAA9C,CANkE,CAQlE;;AACA,QAAMe,OAAO,GAAIC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAjB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAAyB;AACrBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,KAAG,EAAJ,CAAP;AACH,GApBiE,CAsBlE;;;AACAR,EAAAA,SAAS,CAAE,MAAM;AACb,QAAGS,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAwB;AACpBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAKK,IAAGE,QAAQ,IAAIF,IAAI,IAAI,CAAvB,EAAyB;AAC1BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT;AAcA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC/BM,MAAAA,OAD+B;AAE/BG,MAAAA,OAF+B;AAG/BL,MAAAA,WAH+B;AAI/BF,MAAAA,QAJ+B;AAK/BQ,MAAAA,cAL+B;AAM/BC,MAAAA;AAN+B,KAAlC;AAAA,cAQCb;AARD;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import {createContext, useState, ReactNode, useContext, useEffect } from 'react';\r\nimport { ChallengesContext } from './ChallengesContext';\r\n\r\n\r\ninterface CountdownContextData{\r\n    minutes: number;\r\n    seconds: number;\r\n    hasFinished: boolean;\r\n    isActive: boolean;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const CountdownContext = createContext ({ } as CountdownContextData);\r\n\r\nlet countdownTimeout: NodeJS.Timeout;\r\n\r\n\r\nexport function CountdownProvider({children}: CountdownProviderProps ){\r\n\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n    const [time, setTime] = useState(25 * 60);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHarFinished] = useState (false);\r\n\r\n    // Math.floor arredonda pra baixo\r\n    const minutes =  Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    function startCountdown(){\r\n        setIsActive(true);\r\n    }\r\n\r\n    function resetCountdown(){\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setTime(25*60);\r\n    }\r\n\r\n    // sempre receberá primeiro uma função que, que será execultada caso o segundo parâmetro seja mudado\r\n    useEffect( () => {\r\n        if(isActive && time > 0){\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        }\r\n        else if(isActive && time == 0){\r\n            setHarFinished(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n        }\r\n    }, [isActive, time])\r\n\r\n\r\n    return (\r\n        <CountdownContext.Provider value={{ \r\n           minutes, \r\n           seconds,\r\n           hasFinished,\r\n           isActive,\r\n           startCountdown,\r\n           resetCountdown,\r\n        }}>\r\n        {children}\r\n        </CountdownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}