{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\projeto-react\\\\moveit-next\\\\src\\\\pages\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currenteExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallgenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge; // let it change quer dizer => deixa isso mudar, pode receber um novo valor no futuro.\n\n    let finalExperience = currenteExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currenteExperience,\n      challengesCompleted,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallgenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/projeto-react/moveit-next/src/pages/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currenteExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallgenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAkD,OAAlD;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AA0BA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAE,EAAF,CAAvC;AAGP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AAEtE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,kBAAD;AAAA,OAAqBC;AAArB,MAA6CR,QAAQ,CAAC,CAAD,CAA3D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AAChBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAiBnB,UAAU,CAACoB,MAAvC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,eAAT,GAA0B;AACtBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAI,CAACb,eAAL,EAAqB;AACjB;AACH;;AACD,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB,CAJwB,CAKxB;;AACA,QAAIe,eAAe,GAAGnB,kBAAkB,GAAGkB,MAA3C;;AAEA,QAAGC,eAAe,IAAIb,qBAAtB,EAA4C;AACxCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACkB,eAAD,CAApB;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AAEH;;AAGD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAC/BJ,MAAAA,KAD+B;AAE/BE,MAAAA,kBAF+B;AAG/BE,MAAAA,mBAH+B;AAI/BI,MAAAA,qBAJ+B;AAK/BG,MAAAA,OAL+B;AAM/BC,MAAAA,iBAN+B;AAO/BN,MAAAA,eAP+B;AAQ/BY,MAAAA,eAR+B;AAS/BC,MAAAA;AAT+B,KAAnC;AAAA,cAWCpB;AAXD;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH","sourcesContent":["import {createContext, useState, ReactNode } from 'react';\r\n\r\nimport challenges from '../../../challenges.json'\r\n\r\ninterface Challenge{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\n// ReactNode aceita qualquer modo;\r\n\r\ninterface ChallengesContextData{\r\n    level: number;\r\n    currenteExperience: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: Challenge;\r\n    experienceToNextLevel:number;\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallgenge: () => void;\r\n    completeChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext ({ } as ChallengesContextData);\r\n\r\n\r\nexport function ChallengesProvider({ children } : ChallengesProviderProps){\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [currenteExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n    function levelUp(){\r\n      setLevel(level + 1);\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        const randomChallengeIndex = Math.floor(Math.random () * challenges.length)\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n    }\r\n\r\n    function resetChallgenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completeChallenge(){\r\n        if (!activeChallenge){\r\n            return;\r\n        }\r\n        const { amount } = activeChallenge;\r\n        // let it change quer dizer => deixa isso mudar, pode receber um novo valor no futuro.\r\n        let finalExperience = currenteExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengesCompleted(challengesCompleted + 1);\r\n\r\n    }\r\n\r\n    \r\n    return (\r\n        <ChallengesContext.Provider value={{ \r\n            level, \r\n            currenteExperience, \r\n            challengesCompleted, \r\n            experienceToNextLevel,\r\n            levelUp,\r\n            startNewChallenge,\r\n            activeChallenge,\r\n            resetChallgenge,\r\n            completeChallenge\r\n        }}>\r\n        {children}\r\n        </ChallengesContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}