{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/projeto-react/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\projeto-react\\\\moveit-next\\\\src\\\\pages\\\\components\\\\Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { CountdownContext } from '../contexts/CountdownContext';\nimport styles from '../styles/components/Countdown.module.css';\nexport function Countdown() {\n  _s();\n\n  var _useContext = useContext(CountdownContext),\n      minutes = _useContext.minutes,\n      seconds = _useContext.seconds,\n      hasFinished = _useContext.hasFinished,\n      isActive = _useContext.isActive,\n      startCountdown = _useContext.startCountdown,\n      resetCountdown = _useContext.resetCountdown; // se eu tiver no minuto 25, ele retorna 25. (splite divide então ele pegaria e retornaria no array '2' e '5')\n  // se tiver no minuto 5, não existe 2, somente 1, o pad start verifica se só tem 1 numero, ele preenche pra esquerda (start/inicio) com 0\n  //como o splite retorna um array, pode se destruturar pegando cada lado com o [ ] na declaração da variável \n\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), hasFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      type: \"button\",\n      className: styles.countdownButton,\n      children: \"Ciclo encerrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive),\n        onClick: resetCountdown,\n        children: \"Abandonar ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton,\n        onClick: startCountdown,\n        children: \"Iniciar um ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Countdown, \"lI0562bVMKe9uNHQQdJZlOndbFc=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["C:/projeto-react/moveit-next/src/pages/components/Countdown.tsx"],"names":["useContext","CountdownContext","styles","Countdown","minutes","seconds","hasFinished","isActive","startCountdown","resetCountdown","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","countdownContainer","countdownButton","countdownButtonActive"],"mappings":";;;;;;;AACA,SAA8BA,UAA9B,QAAgD,OAAhD;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AAGA,OAAO,SAASC,SAAT,GAAoB;AAAA;;AAAA,oBASfH,UAAU,CAACC,gBAAD,CATK;AAAA,MAGfG,OAHe,eAGfA,OAHe;AAAA,MAIfC,OAJe,eAIfA,OAJe;AAAA,MAKfC,WALe,eAKfA,WALe;AAAA,MAMfC,QANe,eAMfA,QANe;AAAA,MAOfC,cAPe,eAOfA,cAPe;AAAA,MAQfC,cARe,eAQfA,cARe,EAUvB;AACA;AACA;;;AAZuB,8BAaWC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAbX;AAAA;AAAA,MAahBC,UAbgB;AAAA,MAaJC,WAbI;;AAAA,+BAcWJ,MAAM,CAACL,OAAD,CAAN,CAAgBM,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAdX;AAAA;AAAA,MAchBG,UAdgB;AAAA,MAcJC,WAdI;;AAkBvB,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEd,MAAM,CAACe,kBAAvB;AAAA,8BACI;AAAA,gCACI;AAAA,oBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,gCACI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAaKV,WAAW,gBACN;AACA,MAAA,QAAQ,MADR;AAEA,MAAA,IAAI,EAAC,QAFL;AAGA,MAAA,SAAS,EAAEJ,MAAM,CAACgB,eAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBASR;AAAA,gBACKX,QAAQ,gBAED;AACA,QAAA,IAAI,EAAC,QADL;AAEA,QAAA,SAAS,YAAML,MAAM,CAACgB,eAAb,cAAgChB,MAAM,CAACiB,qBAAvC,CAFT;AAGA,QAAA,OAAO,EAAEV,cAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFC,gBAWD;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,EAAEP,MAAM,CAACgB,eAFtB;AAGI,QAAA,OAAO,EAAEV,cAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZZ,qBAtBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqDH;;GAvEeL,S;;KAAAA,S","sourcesContent":["\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { ChallengesContext } from '../contexts/ChallengesContext';\r\nimport { CountdownContext } from '../contexts/CountdownContext';\r\nimport styles from '../styles/components/Countdown.module.css'\r\n\r\n\r\nexport function Countdown(){\r\n\r\n    const {\r\n            minutes, \r\n            seconds, \r\n            hasFinished, \r\n            isActive, \r\n            startCountdown, \r\n            resetCountdown\r\n        } = useContext(CountdownContext)\r\n    // se eu tiver no minuto 25, ele retorna 25. (splite divide então ele pegaria e retornaria no array '2' e '5')\r\n    // se tiver no minuto 5, não existe 2, somente 1, o pad start verifica se só tem 1 numero, ele preenche pra esquerda (start/inicio) com 0\r\n    //como o splite retorna um array, pode se destruturar pegando cada lado com o [ ] na declaração da variável \r\n    const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\r\n    const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\r\n\r\n   \r\n\r\n    return(\r\n        <div>\r\n            <div className={styles.countdownContainer}>\r\n                <div>\r\n                    <span>{minuteLeft}</span>\r\n                    <span>{minuteRight}</span>\r\n                </div>\r\n                <span>:</span>\r\n                <div>\r\n                    <span>{secondLeft}</span>\r\n                    <span>{secondRight}</span>\r\n                </div>\r\n            </div>\r\n            \r\n            {hasFinished ? (\r\n                  <button \r\n                  disabled\r\n                  type=\"button\" \r\n                  className={styles.countdownButton}>\r\n                  Ciclo encerrado\r\n                  </button>\r\n            ) : \r\n            (\r\n                <>\r\n                    {isActive ? \r\n                        (\r\n                            <button \r\n                            type=\"button\" \r\n                            className={ `${styles.countdownButton} ${styles.countdownButtonActive}`}\r\n                            onClick={resetCountdown}>\r\n                            Abandonar ciclo\r\n                            </button>\r\n                        )\r\n                        :\r\n                        (\r\n                            <button \r\n                                type=\"button\" \r\n                                className={styles.countdownButton}\r\n                                onClick={startCountdown}>\r\n                                Iniciar um ciclo\r\n                            </button>\r\n                        )\r\n                    }\r\n                </>\r\n\r\n            )\r\n            \r\n            }\r\n\r\n\r\n         \r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}